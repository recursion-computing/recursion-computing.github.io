{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["handleLinkedin","window","open","handleGithub","handleMail","handleTwitter","handleYouTube","handlePublications","App","className","id","params","particles","opacity","color","number","value","size","random","line_linked","distance","move","speed","background","image","interactivity","events","onhover","enable","mode","style","top","width","src","onClick","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wPAKA,SAASA,IACPC,OAAOC,KAAK,iDAAkD,UAGhE,SAASC,IACPF,OAAOC,KAAK,yCAA0C,UAGxD,SAASE,IACPH,OAAOC,KAAK,uCAAwC,UAGtD,SAASG,IACPJ,OAAOC,KAAK,mCAAoC,UAGlD,SAASI,IACPL,OAAOC,KAAK,2DAA4D,UAG1E,SAASK,IACPN,OAAOC,KAAK,gDAAiD,UA8IhDM,MA3Ef,WAEE,OACE,yBAAKC,UAAU,OAIb,yBAAKC,GAAK,aACR,kBAAC,IAAD,CACEC,OAAQ,CACNC,UAAW,CACTC,QAAS,EACTC,MAAO,UACPC,OAAQ,CACNC,MAAO,KAETC,KAAM,CACJD,MAAO,EACTE,QAAQ,GAERC,YAAa,CACXC,SAAU,KAEZC,KAAM,CACJC,MAAO,IAGXC,WAAY,CACVC,MAAO,uDAETC,cAAe,CACbC,OAAQ,CACNC,QAAS,CACPC,QAAQ,EACRC,KAAM,iBASlB,yBAAKpB,UAAU,YAEb,yBAAKA,UAAU,WAAWqB,MAAO,CAAEC,IAAK,QAASC,MAAO,SAAUC,IAAI,kCAEtE,wBAAIvB,GAAG,aACL,4BACE,yBAAKuB,IAAI,eAAeD,MAAM,OAAOE,QAASlC,KAEhD,4BACE,yBAAKiC,IAAI,aAAaD,MAAM,OAAOE,QAAS/B,KAE9C,4BACE,yBAAK8B,IAAI,WAAWD,MAAM,OAAOE,QAAS9B,KAE5C,4BACE,yBAAK6B,IAAI,cAAcD,MAAM,OAAOE,QAAS7B,KAE/C,4BACE,yBAAK4B,IAAI,cAAcD,MAAM,OAAOE,QAAS5B,KAE/C,4BACE,yBAAK2B,IAAI,mBAAmBD,MAAM,OAAOE,QAAS3B,SCjJ1C4B,QACW,cAA7BlC,OAAOmC,SAASC,UAEe,UAA7BpC,OAAOmC,SAASC,UAEhBpC,OAAOmC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.803fde32.chunk.js","sourcesContent":["import React from 'react';\n// import ParticleField from 'react-particles-webgl';\nimport Particles from 'react-particles-js';\nimport './App.css';\n\nfunction handleLinkedin() {\n  window.open(\"https://www.linkedin.com/company/recursion-inc\", '_blank');\n}\n\nfunction handleGithub() {\n  window.open(\"https://github.com/recursion-computing\", '_blank');\n}\n\nfunction handleMail() {\n  window.open(\"mailto:recursion.computing@gmail.com\", '_blank');\n}\n\nfunction handleTwitter() {\n  window.open(\"https://twitter.com/RecursionInc\", '_blank');\n}\n\nfunction handleYouTube() {\n  window.open(\"https://www.youtube.com/channel/UCuHB_2AOt8vjuvZZp6tSoxg\", '_blank');\n}\n\nfunction handlePublications() {\n  window.open(\"recursion.li/recursion-convergence-conjecture\", '_blank');\n}\n\n// var config = {\n//   showCube: false,\n//   dimension: '3D',\n//   velocity: 0.5,\n//   boundaryType: 'passthru',\n//   antialias: false,\n//   direction: {\n//     xMin: -1,\n//     xMax: 1,\n//     yMin: -1,\n//     yMax: 1,\n//     zMin: -1,\n//     zMax: 1\n//   },\n//   lines: {\n//     colorMode: 'solid',\n//     color: '#ffffff',\n//     transparency: 0.9,\n//     limitConnections: true,\n//     maxConnections: 20,\n//     minDistance: 300,\n//     visible: true\n//   },\n//   particles: {\n//     colorMode: 'solid',\n//     color: '#ed7e48',\n//     transparency: 0.9,\n//     shape: 'circle',\n//     boundingBox: 'canvas',\n//     count: 180,\n//     minSize: 10,\n//     maxSize: 45,\n//     visible: true\n//   },\n//   cameraControls: {\n//     enabled: true,\n//     enableDamping: true,\n//     dampingFactor: 0.2,\n//     enableZoom: true,\n//     autoRotate: true,\n//     autoRotateSpeed: 0.3,\n//     resetCameraFlag: false\n//   }\n// };\n\n// function changeParticleNum(){\n//   var w = window.innerWidth;\n//   var h = window.innerHeight;\n//   //console.log(w,h)\n//   //7372800\n//   //2073600\n//   //204800\n//   //250\n//   //180\n//   //90\n//   if (w*h > 100000){\n//     console.log(\"hello\")\n//     config.particles.count = -450+44*Math.log(w*h)\n//   } else {\n//     config.particles.count = 30\n//   }\n// }\n// changeParticleNum();\n\nfunction App() {\n  // window.addEventListener('resize', changeParticleNum)\n  return (\n    <div className=\"App\">\n      {/* <div id=\"particles\" style={{ height: \"100vh\", width: \"100%\" }}>\n      <ParticleField config={config} />;\n      </div> */}\n      <div id = \"particles\">\n        <Particles\n          params={{\n            particles: {\n              opacity: 1,\n              color: \"#ed7e48\",\n              number: {\n                value: 180\n              },\n              size: {\n                value: 5,\n\t\t            random: true\n              },\n              line_linked: {\n                distance: 200,\n              },\n              move: {\n                speed: 1\n              },\n            },\n            background: {\n              image: \"linear-gradient(135deg, #093f79 -100%, #093f79 50%)\"\n            },\n            interactivity: {\n              events: {\n                onhover: {\n                  enable: true,\n                  mode: \"repulse\"\n                }\n              }\n            }\n          }}\n        >\n        </Particles>\n      </div>\n\n      <div className=\"mainflex\">\n        {/* <h1 className=\"centered\" style={{ top: '-300px', color: '#ffffff'}}>Recursion</h1> */}\n        <img className=\"centered\" style={{ top: '-31px', width: '320px'}} src=\"Recursion Logo Full White.svg\"/>\n        \n        <ul id=\"nav-links\">\n          <li>\n            <img src=\"LinkedIn.svg\" width=\"40px\" onClick={handleLinkedin} />\n          </li>\n          <li>\n            <img src=\"GitHub.svg\" width=\"40px\" onClick={handleGithub} />\n          </li>\n          <li>\n            <img src=\"Mail.svg\" width=\"40px\" onClick={handleMail} />\n          </li>\n          <li>\n            <img src=\"Twitter.svg\" width=\"40px\" onClick={handleTwitter} />\n          </li>\n          <li>\n            <img src=\"YouTube.svg\" width=\"40px\" onClick={handleYouTube} />\n          </li>\n          <li>\n            <img src=\"Publications.svg\" width=\"40px\" onClick={handlePublications} />\n          </li>\n        </ul>\n        \n      </div>\n\n      \n    </div>\n  );\n}\n\nexport default App;\n// export default () => <ParticleField config={config} />;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}